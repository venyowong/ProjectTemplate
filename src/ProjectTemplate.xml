<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ProjectTemplate</name>
    </assembly>
    <members>
        <member name="M:ProjectTemplate.Extensions.HttpClientExtension.GetWithPolly(System.Net.Http.HttpClient,System.String,System.Int32)">
            <summary>
            基于 Polly 发起 GET 请求
            </summary>
            <param name="client"></param>
            <param name="requestUri"></param>
            <param name="timeout">超时时长，分钟</param>
            <returns></returns>
        </member>
        <member name="M:ProjectTemplate.Extensions.HttpClientExtension.PostWithPolly(System.Net.Http.HttpClient,System.String,System.Object,System.Int32)">
            <summary>
            基于 Polly 发起 POST 请求
            </summary>
            <param name="client"></param>
            <param name="requestUri"></param>
            <param name="body"></param>
            <param name="timeout">超时时长，分钟</param>
            <returns></returns>
        </member>
        <member name="M:ProjectTemplate.Extensions.ServiceCollectionExtension.AddTransientBothTypes``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            为父类型和子类型同时添加服务实例
            <para>避免通过父类注入的时候，无法通过子类类型查找子类对象，反之亦然</para>
            <para>可以避免通过父类注入时，通过 GetServices 获取所有对象再查找子类时导致的内存浪费</para>
            </summary>
            <typeparam name="TService"></typeparam>
            <typeparam name="TImplementation"></typeparam>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:ProjectTemplate.Extensions.StringExtension.GZipDecompress(System.String)">
            <summary>
            GZip 解压
            </summary>
            <param name="zippedString"></param>
            <returns></returns>
        </member>
        <member name="M:ProjectTemplate.Extensions.StringExtension.GZipDecompress(System.Byte[])">
            <summary>
            GZip 解压
            </summary>
            <param name="zippedData"></param>
            <returns></returns>
        </member>
        <member name="M:ProjectTemplate.Helpers.DapperHelper.MakeDapperMapping(System.String)">
            <summary>
            扫描命名空间下的 Dapper 映射
            <para>对于数据库字段与数据结构无法通过 Dapper 默认配置映射到一起的情况</para>
            <para>可在对应字段添加 ColumnAttribute 特性，参照 <see cref="T:ProjectTemplate.Models.Feed"/></para>
            <para>并在程序启动后手动调用此接口，传入相应命名空间</para>
            </summary>
            <param name="namspace"></param>
        </member>
        <member name="F:ProjectTemplate.PollyPolicies._sqlExceptionErrorCodes">
            <summary>
            -2 timeout   -1、2、53 与服务器建立连接发生异常
            </summary>
        </member>
        <member name="M:ProjectTemplate.Quartz.IScheduledJob.GetJobDetail">
            <summary>
            必须调用 JobBuilder.StoreDurably
            </summary>
            <returns></returns>
        </member>
        <member name="M:ProjectTemplate.Quartz.IScheduledJob.GetTriggers">
            <summary>
            不同的触发规则需要返回不同的 Trigger
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
